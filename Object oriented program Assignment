import java.io.*;
import java.sql.*;
import java.util.Scanner;

public class ExceptionHandlingDemo {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Checked Exceptions
        handleIOException(scanner);
        handleFileNotFoundException(scanner);
        handleEOFException();
        handleSQLException();
        handleClassNotFoundException();

        // Unchecked Exceptions
        handleArithmeticException(scanner);
        handleNullPointerException();
        handleArrayIndexOutOfBoundsException();
        handleClassCastException();
        handleIllegalArgumentException(scanner);
        handleNumberFormatException(scanner);

        scanner.close();
    }

    // 1. IOException
    private static void handleIOException(Scanner scanner) {
        System.out.println("Simulating IOException: Enter the name of a file to read:");
        String fileName = scanner.nextLine();
        try {
            FileReader file = new FileReader(fileName);
            file.read();
            file.close();
        } catch (IOException e) {
            System.out.println("IOException caught: " + e.getMessage());
        }
    }

    // 2. FileNotFoundException
    private static void handleFileNotFoundException(Scanner scanner) {
        System.out.println("Simulating FileNotFoundException: Enter a file name:");
        String fileName = scanner.nextLine();
        try {
            FileReader file = new FileReader(fileName);
            file.close();
        } catch (FileNotFoundException e) {
            System.out.println("FileNotFoundException caught: " + e.getMessage());
        }
    }

    // 3. EOFException
    private static void handleEOFException() {
        System.out.println("Simulating EOFException:");
        try (ByteArrayInputStream bais = new ByteArrayInputStream(new byte[]{1, 2})) {
            DataInputStream dis = new DataInputStream(bais);
            while (true) {
                dis.readByte();
            }
        } catch (EOFException e) {
            System.out.println("EOFException caught: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 4. SQLException
    private static void handleSQLException() {
        System.out.println("Simulating SQLException:");
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/non_existent_db", "user", "password");
            conn.createStatement().executeQuery("SELECT * FROM non_existent_table");
        } catch (SQLException e) {
            System.out.println("SQLException caught: " + e.getMessage());
        }
    }

    // 5. ClassNotFoundException
    private static void handleClassNotFoundException() {
        System.out.println("Simulating ClassNotFoundException:");
        try {
            Class.forName("com.nonexistent.Class");
        } catch (ClassNotFoundException e) {
            System.out.println("ClassNotFoundException caught: " + e.getMessage());
        }
    }

    // 6. ArithmeticException
    private static void handleArithmeticException(Scanner scanner) {
        System.out.println("Simulating ArithmeticException: Enter two numbers to divide:");
        try {
            int a = Integer.parseInt(scanner.nextLine());
            int b = Integer.parseInt(scanner.nextLine());
            System.out.println("Result: " + (a / b));
        } catch (ArithmeticException e) {
            System.out.println("ArithmeticException caught: Division by zero.");
        }
    }

    // 7. NullPointerException
    private static void handleNullPointerException() {
        System.out.println("Simulating NullPointerException:");
        try {
            String str = null;
            System.out.println(str.length());
        } catch (NullPointerException e) {
            System.out.println("NullPointerException caught: " + e.getMessage());
        }
    }

    // 8. ArrayIndexOutOfBoundsException
    private static void handleArrayIndexOutOfBoundsException() {
        System.out.println("Simulating ArrayIndexOutOfBoundsException:");
        try {
            int[] arr = {1, 2, 3};
            System.out.println(arr[5]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("ArrayIndexOutOfBoundsException caught: " + e.getMessage());
        }
    }

    // 9. ClassCastException
    private static void handleClassCastException() {
        System.out.println("Simulating ClassCastException:");
        try {
            Object obj = new String("Test");
            Integer num = (Integer) obj;
        } catch (ClassCastException e) {
            System.out.println("ClassCastException caught: " + e.getMessage());
        }
    }

    // 10. IllegalArgumentException
    private static void handleIllegalArgumentException(Scanner scanner) {
        System.out.println("Simulating IllegalArgumentException: Enter a negative number:");
        try {
            int num = Integer.parseInt(scanner.nextLine());
            if (num < 0) {
                throw new IllegalArgumentException("Number must not be negative.");
            }
            System.out.println("Number is valid.");
        } catch (IllegalArgumentException e) {
            System.out.println("IllegalArgumentException caught: " + e.getMessage());
        }
    }

    // 11. NumberFormatException
    private static void handleNumberFormatException(Scanner scanner) {
        System.out.println("Simulating NumberFormatException: Enter a number:");
        try {
            String input = scanner.nextLine();
            int num = Integer.parseInt(input);
            System.out.println("Valid number: " + num);
        } catch (NumberFormatException e) {
            System.out.println("NumberFormatException caught: " + e.getMessage());
        }
    }
}
